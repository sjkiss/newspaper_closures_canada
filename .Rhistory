#calculate the previous margin of victory
names(elections)
elections %>%
group_by(municipality) %>%
mutate(previous_margin=lag(margin_percent)) ->elections
#Check
qplot(elections$margin_percent, geom="histogram")
summary(elections)
#### How many complete observations####
#Remove extraneous variables
names(elections)
elections %>%
select(-c("Votes", "Election Total Votes", "Total_votes", "margin"))->elections
names(elections)
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(turnout:margin_percent)))) ->elections
#Examine
elections$na
View(elections)
#Check Jasper
elections%>%
filter(municipality=="Jasper")
elections %>%
filter(municipality=="Grandview") %>%
View()
names(elections)
elections %>%
select(turnout, margin_percent, `number of candidates`) %>%
is.na() %>%
colSums()
elections %>%
select(turnout, margin_percent, `number of candidates`) %>%
is.na() %>%
colSums()
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(turnout, `number of candidates`, margin_percent)))) ->elections
### Warning:
# Set the working directory to be the directory where this R-script is stored on your computer
#Or, more simply, open the Rstudio PRoject file in the folder. It will do that automatically
#Checks
#getwd()
#list.files()
#Install necessary packages
to.install<-c('readxl', 'tidyverse' ,'tidylog', 'here')                                    # Specify your packages
not_installed <- to.install[!(to.install %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)
#Load libraries
library(readxl)
library(dplyr)
library(tidyverse)
library(tidylog)
library(here)
#This reads in the newspaper file
elections<-read_xlsx(path=here("Data", "working_data_file.xlsx"))
#Call the code to add in the Statistics Canada data
source(here("R_Scripts/2_download_census_data.R"))
#Set variables to be numeric
elections$turnout<-as.numeric(elections$turnout)
elections$Total_votes<-as.numeric(elections$`Election Total Votes`)
#Check what's been imported
names(elections)
#drop last name
elections %>%
select(-`Last Name`, -12)->elections
#Create Unique ID by combining city name and year
elections<-elections %>%
unite("id", 5:6, remove=F)
##### Define acclaimed candidates
names(elections)
elections$acclaimed<-ifelse(elections$`number of candidates`==1, 1, 0)
##### Calculate Margin
elections %>%
#Form groups by municipality and year
group_by(municipality, year) %>%
#Arrange the data by province, then city then year, moving from largest vote-getter (e.g. the winner), to the least
arrange(province, municipality, year, desc(Votes), by_group=T) %>%
mutate(place=row_number()) %>%
#calculate the margin as a function of Votes minus the next votegetter in the group (e.g. the second-place candidate)
mutate(margin=Votes-lead(Votes),
#convert to a percent
margin_percent=margin/Total_votes) ->elections
elections %>%
filter(place==1) ->elections
#### Calculate first Differences
names(elections)
#Calculate the change in turnout
elections %>%
group_by(municipality) %>%
mutate(delta_turnout=turnout-lag(turnout),
delta_margin=margin_percent-lag(margin_percent),
delta_n=`number of candidates`-lag(`number of candidates`)) ->elections
#Identify the first closure
elections %>%
group_by(municipality, closure= status<0) %>%
arrange(closure) %>%
mutate(closure_count= row_number(),
first_closure = closure & closure_count==1) ->elections
#calculate the previous margin of victory
names(elections)
elections %>%
group_by(municipality) %>%
mutate(previous_margin=lag(margin_percent)) ->elections
#Check
qplot(elections$margin_percent, geom="histogram")
summary(elections)
#### How many complete observations####
#Remove extraneous variables
names(elections)
elections %>%
select(-c("Votes", "Election Total Votes", "Total_votes", "margin"))->elections
names(elections)
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(turnout, `number of candidates`, margin_percent)))) ->elections
### Warning:
# Set the working directory to be the directory where this R-script is stored on your computer
#Or, more simply, open the Rstudio PRoject file in the folder. It will do that automatically
#Checks
#getwd()
#list.files()
#Install necessary packages
to.install<-c('readxl', 'tidyverse' ,'tidylog', 'here')                                    # Specify your packages
not_installed <- to.install[!(to.install %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)
#Load libraries
library(readxl)
library(dplyr)
library(tidyverse)
library(tidylog)
library(here)
#This reads in the newspaper file
elections<-read_xlsx(path=here("Data", "working_data_file.xlsx"))
#Call the code to add in the Statistics Canada data
source(here("R_Scripts/2_download_census_data.R"))
#Set variables to be numeric
elections$turnout<-as.numeric(elections$turnout)
elections$Total_votes<-as.numeric(elections$`Election Total Votes`)
#Check what's been imported
names(elections)
#drop last name
elections %>%
select(-`Last Name`, -12)->elections
#Create Unique ID by combining city name and year
elections<-elections %>%
unite("id", 5:6, remove=F)
##### Define acclaimed candidates
names(elections)
elections$acclaimed<-ifelse(elections$`number of candidates`==1, 1, 0)
##### Calculate Margin
elections %>%
#Form groups by municipality and year
group_by(municipality, year) %>%
#Arrange the data by province, then city then year, moving from largest vote-getter (e.g. the winner), to the least
arrange(province, municipality, year, desc(Votes), by_group=T) %>%
mutate(place=row_number()) %>%
#calculate the margin as a function of Votes minus the next votegetter in the group (e.g. the second-place candidate)
mutate(margin=Votes-lead(Votes),
#convert to a percent
margin_percent=margin/Total_votes) ->elections
elections %>%
filter(place==1) ->elections
#### Calculate first Differences
names(elections)
#Calculate the change in turnout
elections %>%
group_by(municipality) %>%
mutate(delta_turnout=turnout-lag(turnout),
delta_margin=margin_percent-lag(margin_percent),
delta_n=`number of candidates`-lag(`number of candidates`)) ->elections
#Identify the first closure
elections %>%
group_by(municipality, closure= status<0) %>%
arrange(closure) %>%
mutate(closure_count= row_number(),
first_closure = closure & closure_count==1) ->elections
#calculate the previous margin of victory
names(elections)
elections %>%
group_by(municipality) %>%
mutate(previous_margin=lag(margin_percent)) ->elections
#Check
qplot(elections$margin_percent, geom="histogram")
summary(elections)
#### How many complete observations####
#Remove extraneous variables
names(elections)
elections %>%
select(-c("Votes", "Election Total Votes", "Total_votes", "margin"))->elections
names(elections)
elections %>%
#Perform the next functions by row
rowwise()
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(turnout, `number of candidates`, margin_percent))))
#Examine
names(elections)
?c_across
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across("turnout"))))
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across("turnout", "number of candidates"))))
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across("turnout", `number of candidates`))))
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(c('turnout')))))
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(c('turnout', `number of candidates`)))))
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(c(turnout, `number of candidates`, margin_percent)))))
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(c(turnout, `number of candidates`, margin_percent)))))->elections
elections %>%
select(turnout, margin_percent, `number of candidates`) %>%
is.na() %>%
colSums()
elections$na
#556 Observations.
nrow(elections)
elections %>%
filter(na==0) %>%
nrow()
### Warning:
# Set the working directory to be the directory where this R-script is stored on your computer
#Or, more simply, open the Rstudio PRoject file in the folder. It will do that automatically
#Checks
#getwd()
#list.files()
#Install necessary packages
to.install<-c('readxl', 'tidyverse' ,'tidylog', 'here')                                    # Specify your packages
not_installed <- to.install[!(to.install %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)
#Load libraries
library(readxl)
library(dplyr)
library(tidyverse)
library(tidylog)
library(here)
#This reads in the newspaper file
elections<-read_xlsx(path=here("Data", "working_data_file.xlsx"))
#Call the code to add in the Statistics Canada data
source(here("R_Scripts/2_download_census_data.R"))
#Set variables to be numeric
elections$turnout<-as.numeric(elections$turnout)
elections$Total_votes<-as.numeric(elections$`Election Total Votes`)
#Check what's been imported
names(elections)
#drop last name
elections %>%
select(-`Last Name`, -12)->elections
#Create Unique ID by combining city name and year
elections<-elections %>%
unite("id", 5:6, remove=F)
##### Define acclaimed candidates
names(elections)
elections$acclaimed<-ifelse(elections$`number of candidates`==1, 1, 0)
##### Calculate Margin
elections %>%
#Form groups by municipality and year
group_by(municipality, year) %>%
#Arrange the data by province, then city then year, moving from largest vote-getter (e.g. the winner), to the least
arrange(province, municipality, year, desc(Votes), by_group=T) %>%
mutate(place=row_number()) %>%
#calculate the margin as a function of Votes minus the next votegetter in the group (e.g. the second-place candidate)
mutate(margin=Votes-lead(Votes),
#convert to a percent
margin_percent=margin/Total_votes) ->elections
elections %>%
filter(place==1) ->elections
#### Calculate first Differences
names(elections)
#Calculate the change in turnout
elections %>%
group_by(municipality) %>%
mutate(delta_turnout=turnout-lag(turnout),
delta_margin=margin_percent-lag(margin_percent),
delta_n=`number of candidates`-lag(`number of candidates`)) ->elections
#Identify the first closure
elections %>%
group_by(municipality, closure= status<0) %>%
arrange(closure) %>%
mutate(closure_count= row_number(),
first_closure = closure & closure_count==1) ->elections
#calculate the previous margin of victory
names(elections)
elections %>%
group_by(municipality) %>%
mutate(previous_margin=lag(margin_percent)) ->elections
#Check
qplot(elections$margin_percent, geom="histogram")
summary(elections)
#### How many complete observations####
#Remove extraneous variables
names(elections)
elections %>%
select(-c("Votes", "Election Total Votes", "Total_votes", "margin"))->elections
names(elections)
#Add # of missing values
elections %>%
#Perform the next functions by row
rowwise() %>%
#Count the number of missings in each row for the DVs turnout to margin_percent
mutate(na=sum(is.na(c_across(c(turnout, `number of candidates`, margin_percent)))))->elections
#Examine
names(elections)
View(elections)
#Check Jasper
elections%>%
filter(municipality=="Jasper")
elections %>%
filter(municipality=="Grandview") %>%
View()
names(elections)
elections %>%
select(turnout, margin_percent, `number of candidates`) %>%
is.na() %>%
colSums()
elections$na
#556 Observations.
nrow(elections)
elections %>%
filter(na==0) %>%
nrow()
# 462 complete cases
elections %>%
filter(na<2) %>%
nrow()
#516 with at least two DVs
elections %>%
filter(na<3) %>%
nrow()
#542 election years with at least 1 DV
#How many with newspaper closures
elections%>%
group_by(municipality, year) %>%
mutate(treatment=case_when(
status<0 ~ 1,
TRUE ~ 0
)) ->elections
elections %>%   group_by(treatment) %>%
summarize(n=n())
# 82 post-treatment election-years, 471 non-treatment election-years
#How many election years prior to the treatment
#Assign To Treatment Group
#This assigns 1 to any city-year where a newspaper has been closed
elections %>%
group_by(municipality) %>%
mutate(treat_group=case_when(
sum(status)==0 ~ 0,
sum(status)<0 ~1
))->elections
elections %>%
select(municipality, year)
elections %>%
select(municipality, year) %>%
count()
elections %>%
select(municipality, year) %>%
group_by(municipality)
elections %>%
select(municipality, year) %>%
group_by(municipality) %>%
count()
unique(elections$municipality)
table(unique(elections$municipality))
elections %>%
group_by(municipality)
elections %>%
group_by(municipality) %>%
summarize(out=sum())
elections %>%
group_by(municipality) %>%
summarize(out=n())
elections %>%
n_distinct(municipality)
elections %>%
n_distinct(municipality)
library(DescTools)
#### Write Out Descriptives ####
install.packages("DescTools")
#### Write Out Descriptives ####
#install.packages("DescTools")
library(DescTools)
#### Write Out Descriptives ####
#install.packages("DescTools")
library(DescTools)
describe(elections)
#### Write Out Descriptives ####
#install.packages("DescTools")
library(gtsummary)
elections %>%
select(municipality, year)
elections %>%
select(municipality, year) %>%
tbl_summary()
?tbl_summary()
elections %>%
select(municipality, year) %>%
tbl_summary(
statistic=municipality~ "{N_obs}"
)
elections %>%
select(municipality, year)
#### Write Out Descriptives ####
#install.packages("DescTools")
length(unique(elections$municipality))
length(unique(elections$year))
elections %>%
group_by(municipality) %>%
count(year)
elections %>%
group_by(municipality) %>%
n_distinct(year)
elections %>%
group_by(municipality, year) %>%
count()
elections %>%
group_by(municipality) %>%
count()
elections %>%
group_by(municipality) %>%
count() %>%
summary()
elections %>%
group_by(municipality) %>%
count() %>%
filter(n>5)
elections %>%
filter(municipality=="Saskatoon")
elections %>%
group_by(municipality) %>%
count()
elections %>%
group_by(municipality) %>%
count() %>%
summary()
elections %>%
select(municipality) %>%
tbl_summary()
elections %>%
select(municipality, year) %>%
mutate(total_municipality=n_distinct(municipality))
elections %>%
select(municipality) %>%
tbl_summary() %>%
add_overall()
elections %>%
select(municipality) %>%
tbl_summary(statistic="{N}")
elections %>%
select(municipality) %>%
tbl_summary(statistic=municipality~"{N}")
data.frame(var1=sample(c('A', 'B', 'C')))
data.frame(var1=sample(c('A', 'B', 'C', replace=T, size=100)))
?sample
data.frame(var1=sample(c('A', 'B', 'C'), replace=T, size=100))
data.frame(var1=sample(c('A', 'B', 'C', 'D', 'E'), replace=T, size=400))
data.frame(var1=sample(c('A', 'B', 'C', 'D', 'E'), replace=T, size=400)) %>%
arrange(var1)
data.frame(var1=sample(c('A', 'B', 'C', 'D', 'E'), replace=T, size=100)) %>%
arrange(var1)
data.frame(var1=sample(c('A', 'B', 'C'), replace=T, size=100)) %>%
arrange(var1)
data.frame(var1=sample(c('A', 'B', 'C'), replace=T, size=36)) %>%
arrange(var1)
rep("A", 3)
rep("B", 3)
var1<-c(rep("A", 3), rep("B", 3), rep("C", 3))
var2<-sample(seq(2003,2012, 1), size=lenth(var1))
var2<-sample(seq(2003,2012, 1), size=length(var1))
